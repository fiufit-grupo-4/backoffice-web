{"ast":null,"code":"var _jsxFileName = \"/home/dante/Escritorio/GitHub/Taller II/backoffice-web/app/src/routes/PrivateRoute.js\";\nimport { Route, Navigate } from 'react-router-dom';\n\n/*\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  //const token = localStorage.getItem('access_token'); // O donde hayas almacenado el token\n\n  // Verificar si el token existe y es v치lido\n  //const isAuthenticated = token && isTokenValid(token); // Implementa esta funci칩n para validar el token\n\n  const isAuthenticated = true\n  return (\n    <Route {...rest} render={props => (\n      isAuthenticated ? <Component {...props} /> : <Navigate to=\"/\" />\n    )} />\n  );\n}*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = Component => {\n  const access_token = localStorage.getItem(\"accesToken\");\n  console.log(access_token);\n  //const auth = access_token == \"true\"? true : false; //your logic\n\n  const auth = false; //your logic\n  console.log(auth);\n  return auth ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 19\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 35\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Route","Navigate","jsxDEV","_jsxDEV","PrivateRoute","Component","access_token","localStorage","getItem","console","log","auth","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/home/dante/Escritorio/GitHub/Taller II/backoffice-web/app/src/routes/PrivateRoute.js"],"sourcesContent":["import { Route, Navigate } from 'react-router-dom';\n\n/*\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  //const token = localStorage.getItem('access_token'); // O donde hayas almacenado el token\n\n  // Verificar si el token existe y es v치lido\n  //const isAuthenticated = token && isTokenValid(token); // Implementa esta funci칩n para validar el token\n\n  const isAuthenticated = true\n  return (\n    <Route {...rest} render={props => (\n      isAuthenticated ? <Component {...props} /> : <Navigate to=\"/\" />\n    )} />\n  );\n}*/\n\nconst PrivateRoute = (Component) => {\n    const access_token = localStorage.getItem(\"accesToken\")\n    console.log(access_token)\n    //const auth = access_token == \"true\"? true : false; //your logic\n    \n    \n    const auth = false; //your logic\n    console.log(auth)\n    return auth ? <Component /> : <Navigate to=\"/\" />\n}\n\nexport default PrivateRoute"],"mappings":";AAAA,SAASA,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,SAAAC,MAAA,IAAAC,OAAA;AAeA,MAAMC,YAAY,GAAIC,SAAS,IAAK;EAChC,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACvDC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;EACzB;;EAGA,MAAMK,IAAI,GAAG,KAAK,CAAC,CAAC;EACpBF,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EACjB,OAAOA,IAAI,gBAAGR,OAAA,CAACE,SAAS;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,gBAAGZ,OAAA,CAACF,QAAQ;IAACe,EAAE,EAAC;EAAG;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACrD,CAAC;AAAAE,EAAA,GATKb,YAAY;AAWlB,eAAeA,YAAY;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}