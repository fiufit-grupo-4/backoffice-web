{"ast":null,"code":"var _jsxFileName = \"/home/dante/Escritorio/GitHub/Taller II/backoffice-web/app/src/routes/PrivateRoute.js\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = _ref => {\n  let {\n    Component\n  } = _ref;\n  const accessToken = localStorage.getItem(\"accesToken\");\n  //const auth = access_token == \"true\"? true : false;\n  //console.log(auth)\n  return accessToken ? Component : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 38\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\n\n/*\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  //const token = localStorage.getItem('access_token'); // O donde hayas almacenado el token\n\n  // Verificar si el token existe y es v치lido\n  //const isAuthenticated = token && isTokenValid(token); // Implementa esta funci칩n para validar el token\n\n  const isAuthenticated = true\n  return (\n    <Route {...rest} render={props => (\n      isAuthenticated ? <Component {...props} /> : <Navigate to=\"/\" />\n    )} />\n  );\n}*/\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","jsxDEV","_jsxDEV","PrivateRoute","_ref","Component","accessToken","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dante/Escritorio/GitHub/Taller II/backoffice-web/app/src/routes/PrivateRoute.js"],"sourcesContent":["import { Navigate } from 'react-router-dom';\n\nconst PrivateRoute = ({Component}) => {\n    const accessToken = localStorage.getItem(\"accesToken\")\n    //const auth = access_token == \"true\"? true : false;\n    //console.log(auth)\n    return accessToken ? Component : <Navigate to=\"/\" />\n}\n\nexport default PrivateRoute\n\n\n/*\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  //const token = localStorage.getItem('access_token'); // O donde hayas almacenado el token\n\n  // Verificar si el token existe y es v치lido\n  //const isAuthenticated = token && isTokenValid(token); // Implementa esta funci칩n para validar el token\n\n  const isAuthenticated = true\n  return (\n    <Route {...rest} render={props => (\n      isAuthenticated ? <Component {...props} /> : <Navigate to=\"/\" />\n    )} />\n  );\n}*/"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,YAAY,GAAGC,IAAA,IAAiB;EAAA,IAAhB;IAACC;EAAS,CAAC,GAAAD,IAAA;EAC7B,MAAME,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACtD;EACA;EACA,OAAOF,WAAW,GAAGD,SAAS,gBAAGH,OAAA,CAACF,QAAQ;IAACS,EAAE,EAAC;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACxD,CAAC;AAAAC,EAAA,GALKX,YAAY;AAOlB,eAAeA,YAAY;;AAG3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}